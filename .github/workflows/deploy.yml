# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the workflow will run
on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    if: contains('["loaderb0t"]', github.actor)
    # The type of runner that the job will run on
    runs-on: deploy

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: "Download artifact"
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var workflowRuns = await github.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "ci.yml",
              status: "success",
              branch: "main",
              per_page: 1,
            });
            console.log(`found ${workflowRuns.data.total_count} runs`);
            var workflowRun = workflowRuns.data.workflow_runs[0];
            var runId = workflowRun.id;
            console.log(`found runId ${runId}`);

            var artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });
            console.log(`found ${artifacts.data.total_count} artifacts`);
            var artifact = artifacts.data.artifacts[0];
            var artifactId = artifact.id;
            console.log(`found artifactId ${artifactId}`);
            var download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifactId,
              archive_format: "zip",
            });
            var fs = require("fs");
            fs.writeFileSync("../artifacts/web.zip", Buffer.from(download.data));
      - name: Extract artifact
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            Remove-Item "$PWD\..\artifacts\web" -Recurse
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory("$PWD\..\artifacts\web.zip", "$PWD\..\artifacts\web")
      - name: Stop IIS AppPool
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            Set-Location "C:\Windows\System32\inetsrv"
            ./appcmd stop apppool /apppool.name:"awdware2"
      - name: Copy Artifacts
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            $appPath = 'C:\web\www\awdware2\angular'
            $webCfgPath = 'C:\web\www\awdware2\cfg\angular\web.config'
            $moduleJsonPath = 'C:\web\www\awdware2\cfg\angular\modules.json'
            $envJsonPath = 'C:\web\www\awdware2\cfg\angular\environment.json'
            $apps = @('core', 'led');

            Remove-Item $appPath -Recurse
            New-Item -ItemType Directory -Path $appPath -Force

            Copy-Item "$PWD\..\artifacts\web\apps\host" -Destination $appPath -Recurse
            Copy-Item $webCfgPath -Destination "$appPath\host"

            foreach ($app in $apps) {
              Copy-Item "$PWD\..\artifacts\web\apps\$app" -Destination "$appPath\host\assets" -Recurse
            }

            Copy-Item $moduleJsonPath -Destination "$appPath\host\modules"
            Copy-Item $envJsonPath -Destination "$appPath\host\environments"
      - name: Start IIS AppPool
        uses: Amadevus/pwsh-script@v2.0.1
        with:
          script: |
            Set-Location "C:\Windows\System32\inetsrv"
            ./appcmd start apppool /apppool.name:"awdware2"
